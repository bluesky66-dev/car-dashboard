{"version":3,"sources":["@core/components/ui-loader/index.js","@core/components/input-group/index.js","redux/RecoveryCategory/actions.js","@core/components/react-select-group/index.js","views/RecoveryRequest/Edit/EditForm.js","views/RecoveryRequest/Edit/index.js"],"names":["UILoader","props","children","blocking","loader","className","tag","overlayColor","Tag","classnames","style","backgroundColor","defaultProps","color","InputGroup","type","error","decimals","step","min","max","disabled","placeholder","label","rows","name","defaultValue","onInputChange","required","autoComplete","rest","useState","setValue","setInitValue","register","useForm","_onChange","e","target","value","pattern","onInput","replace","onChange","innerRef","recoveryCategoryFormChange","formData","FORM_CHANGE","payload","recoveryCategoryEditChange","EDIT_CHANGE","getAllRecoveryCategories","dispatch","a","axios","get","then","response","GET_ALL_DATA","data","recoveryCategories","getRecoveryCategoryList","params","GET_DATA","totalPages","total","getRecoveryCategory","id","GET","selectedRecoveryCategory","recoveryCategory","catch","err","console","log","addRecoveryCategory","getState","rules","serviceName","serviceCategory","serviceSubCategory","serviceIconUrl","basePrice","recoveryCategoryFormData","allFieldsValidation","isValid","errors","SET_FORM_ERRORS","SET_SUBMITTING","SET_LOADING","post","ADD","RESET_FORM","successfulOptions","title","position","autoDismiss","success","handleError","updateRecoveryCategory","_id","createdAt","updatedAt","userInfo","__v","put","deactivateRecoveryCategory","message","DEACTIVATE","deleteRecoveryCategory","delete","DELETE","ReactSelectGroup","options","theme","selectThemeColors","classNamePrefix","isDisabled","isClearable","action","removedValue","RecoveryEdit","selectedRecovery","setRecoveryData","useDispatch","allUsers","useSelector","state","users","allData","allUserCars","userCars","employees","allEmployees","agents","vendors","allVendors","allVendorEmployees","employeeAllData","allRecoveryCategories","recoveries","isLoading","formErrors","isSubmitting","useEffect","getAllUsers","getAllEmployees","getAllAgents","getAllVendors","userId","getAllUserCars","vendorId","getAllVendorEmployees","handleFormChange","recoveryEditChange","userOptions","map","userItem","firstName","lastName","userOption","length","userCarOptions","userCarItem","carMake","carModel","engineCapacity","userCarInfo","userCarOption","userCarId","employeeOptions","employeeItem","employeeInfo","employeeOption","carhootEmployeeId","vendorOptions","vendorItem","vendorName","vendorInfo","vendorOption","vendorEmployeeOptions","vendorEmployeeItem","vendorEmployeeInfo","vendorEmployeeOption","fieldAgentOptions","agent","fieldAgentInfo","fieldAgentOption","fieldAgentId","categoryOptions","category","categoryInfo","categoryOption","orderCategoryId","Row","Col","sm","Form","onSubmit","event","preventDefault","updateRecovery","md","orderPrice","Button","Ripple","outline","activeTab","setActiveTab","useParams","getRecovery","undefined","Card","CardBody","Nav","pills","NavItem","NavLink","active","onClick","size","TabContent","TabPane","tabId","Alert","to"],"mappings":"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","file":"static/js/51.4d03f92f.chunk.js","sourcesContent":["// ** Third Party Components\nimport { Fragment } from 'react'\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\nimport { Spinner } from 'reactstrap'\n\nimport './ui-loader.scss'\n\nconst UILoader = props => {\n  const { children, blocking, loader, className, tag, overlayColor } = props\n\n  const Tag = tag\n\n  return (\n    <Tag className={classnames('ui-loader', { [className]: className, show: blocking })}>\n      {children}\n      {blocking ? (\n        <Fragment>\n          <div\n            className='overlay' /*eslint-disable */\n            {...(blocking && overlayColor ? { style: { backgroundColor: overlayColor } } : {})}\n            /*eslint-enable */\n          ></div>\n          <div className='loader'>{loader}</div>\n        </Fragment>\n      ) : null}\n    </Tag>\n  )\n}\n\nexport default UILoader\n\nUILoader.defaultProps = {\n  tag: 'div',\n  blocking: false,\n  loader: <Spinner color='primary' />\n}\n\nUILoader.propTypes = {\n  tag: Proptypes.string,\n  loader: Proptypes.any,\n  className: Proptypes.string,\n  overlayColor: Proptypes.string,\n  blocking: Proptypes.bool.isRequired\n}\n","/**\n *\n * Input\n *\n */\n\nimport React, { useState } from 'react'\nimport { useForm } from 'react-hook-form'\nimport { FormGroup, FormText, Input, Label } from 'reactstrap'\n\nconst InputGroup = props => {\n  const {\n    type,\n    error,\n    step,\n    decimals,\n    min,\n    max,\n    disabled,\n    placeholder,\n    rows,\n    label,\n    name,\n    defaultValue = '',\n    onInputChange,\n    children,\n    required = false,\n    autoComplete = 'off',\n    ...rest\n  } = props\n\n  const [value, setValue] = useState('')\n  const [initValue, setInitValue] = useState(false)\n  const { register } = useForm()\n\n  const _onChange = e => {\n    onInputChange(e.target.name, e.target.value)\n    setInitValue(true)\n    setValue(e.target.value)\n  }\n\n  if (type === 'number') {\n\n    const handleOnInput = e => {\n      if (!decimals) {\n        e.target.value = e.target.value.replace(/[^0-9]*/g, '')\n      }\n    }\n    return (\n      <FormGroup>\n        {label && <Label className='form-label'>\n          {label} {required && <span className='text-danger'>*</span>}\n        </Label>}\n        <Input\n          autoComplete='on'\n          step='step'\n          min={min || 0}\n          max={max || null}\n          pattern='[0-9]'\n          onInput={handleOnInput}\n          type={type}\n          onChange={e => {\n            _onChange(e)\n          }}\n          disabled={disabled}\n          name={name}\n          value={defaultValue}\n          placeholder={placeholder}\n          innerRef={register({ required })}\n          {...rest}\n        />\n        <FormText color=\"danger\">{error && error[0]}</FormText>\n      </FormGroup>\n    )\n  } else {\n    return (\n      <FormGroup>\n        {label && <Label className='form-label'>\n          {label} {required && <span className='text-danger'>*</span>}\n        </Label>}\n        <Input\n          autoComplete={autoComplete}\n          type={type}\n          onChange={e => {\n            _onChange(e)\n          }}\n          disabled={disabled}\n          name={name}\n          value={defaultValue}\n          placeholder={placeholder}\n          innerRef={register({ required })}\n          {...rest}\n        >\n          {children}\n        </Input>\n        <FormText color=\"danger\">{error && error[0]}</FormText>\n      </FormGroup>\n    )\n  }\n}\n\nInputGroup.defaultProps = {\n  step: 1,\n  decimals: true,\n  rows: '4'\n}\n\nexport default InputGroup\n","/*\n *\n * RecoveryCategory actions\n *\n */\n\nimport axios from 'axios'\nimport { success } from \"react-notification-system-redux\"\n\nimport {\n  RESET_FORM,\n  GET_ALL_DATA,\n  GET_DATA,\n  GET,\n  ADD,\n  DELETE,\n  SET_LOADING,\n  SET_SUBMITTING,\n  SET_FORM_ERRORS,\n  FORM_CHANGE,\n  EDIT_CHANGE,\n  DEACTIVATE\n} from './constants'\nimport handleError from '@utils/error'\nimport { allFieldsValidation } from '@utils/validation'\n\nexport const recoveryCategoryFormChange = (name, value) => {\n  const formData = {}\n  formData[name] = value\n\n  return {\n    type: FORM_CHANGE,\n    payload: formData\n  }\n}\n\nexport const recoveryCategoryEditChange = (name, value) => {\n  const formData = {}\n  formData[name] = value\n\n  return {\n    type: EDIT_CHANGE,\n    payload: formData\n  }\n}\n\n// ** Get all Data\nexport const getAllRecoveryCategories = () => {\n  return async dispatch => {\n    await axios.get('/api/recoveryCategories').then(response => {\n      dispatch({\n        type: GET_ALL_DATA,\n        data: response.data.recoveryCategories\n      })\n    })\n  }\n}\n\n// ** Get data on page or row change\nexport const getRecoveryCategoryList = params => {\n  return async dispatch => {\n    await axios.get('/api/recoveryCategories', { params }).then(response => {\n      dispatch({\n        type: GET_DATA,\n        data: response.data.recoveryCategories,\n        totalPages: response.data.total,\n        params\n      })\n    })\n  }\n}\n\n// ** Get RecoveryCategory\nexport const getRecoveryCategory = id => {\n  return async dispatch => {\n    await axios\n      .get(`/api/recoveryCategories/${id}`)\n      .then(response => {\n        dispatch({\n          type: GET,\n          selectedRecoveryCategory: response.data.recoveryCategory\n        })\n      })\n      .catch(err => console.log(err))\n  }\n}\n\n// ** Add recoveryCategory\nexport const addRecoveryCategory = () => {\n  return async (dispatch, getState) => {\n    const rules = {\n      serviceName: 'required',\n      serviceCategory: 'required',\n      serviceSubCategory: 'required',\n      serviceIconUrl: 'required',\n      basePrice: 'required'\n    }\n\n    const recoveryCategory = getState().recoveryCategories.recoveryCategoryFormData\n    const { isValid, errors } = allFieldsValidation(recoveryCategory, rules, {\n      'required.serviceName': 'Service name is required.',\n      'required.serviceCategory': 'Category is required.',\n      'required.serviceSubCategory': 'Subcategory is required.',\n      'required.serviceIconUrl': 'Icon Url is required.',\n      'required.basePrice': 'Base price is required.'\n    })\n\n    if (!isValid) {\n      return dispatch({ type: SET_FORM_ERRORS, payload: errors })\n    }\n\n    dispatch({ type: SET_SUBMITTING, payload: true })\n    dispatch({ type: SET_LOADING, payload: true })\n\n    try {\n      const response = await axios.post('/api/recoveryCategories', recoveryCategory)\n      dispatch({\n        type: ADD,\n        recoveryCategory\n      })\n      dispatch({\n        type: RESET_FORM,\n        payload: {}\n      })\n      dispatch(getRecoveryCategoryList(getState().recoveryCategories.params))\n      dispatch(getAllRecoveryCategories())\n\n      const successfulOptions = {\n        title: `The recoveryCategory has been added successfully!`,\n        position: 'tr',\n        autoDismiss: 1\n      }\n\n      dispatch(success(successfulOptions))\n    } catch (error) {\n      const title = `We were not able to create the recoveryCategory. Please try again.`\n      handleError(error, dispatch, title)\n    } finally {\n      dispatch({ type: SET_SUBMITTING, payload: false })\n      dispatch({ type: SET_LOADING, payload: false })\n    }\n  }\n}\n\n// ** Delete recoveryCategory\nexport const updateRecoveryCategory = (_id) => {\n  return async (dispatch, getState) => {\n    const rules = {\n      serviceName: 'required',\n      serviceCategory: 'required',\n      serviceSubCategory: 'required',\n      serviceIconUrl: 'required',\n      basePrice: 'required'\n    }\n\n    const recoveryCategory = { ...getState().recoveryCategories.selectedRecoveryCategory }\n    const { isValid, errors } = allFieldsValidation(recoveryCategory, rules, {\n      'required.serviceName': 'Service name is required.',\n      'required.serviceCategory': 'Category is required.',\n      'required.serviceSubCategory': 'Subcategory is required.',\n      'required.serviceIconUrl': 'Icon Url is required.',\n      'required.basePrice': 'Base price is required.'\n    })\n\n\n    if (!isValid) {\n      return dispatch({ type: SET_FORM_ERRORS, payload: errors })\n    }\n\n    dispatch({ type: SET_SUBMITTING, payload: true })\n    dispatch({ type: SET_LOADING, payload: true })\n\n    try {\n      delete recoveryCategory._id\n      delete recoveryCategory.createdAt\n      delete recoveryCategory.updatedAt\n      delete recoveryCategory.userInfo\n      delete recoveryCategory.__v\n      await axios.put(`/api/recoveryCategories/${_id}`, recoveryCategory)\n      dispatch({\n        type: RESET_FORM,\n        payload: {}\n      })\n\n      const successfulOptions = {\n        title: `RecoveryCategory information was updated successfully!`,\n        position: 'tr',\n        autoDismiss: 1\n      }\n\n      dispatch(success(successfulOptions))\n    } catch (error) {\n      const title = `We were not able to update the recoveryCategory. Please try again.`\n      handleError(error, dispatch, title)\n    } finally {\n      dispatch({ type: SET_SUBMITTING, payload: false })\n      dispatch({ type: SET_LOADING, payload: false })\n    }\n  }\n}\n\n// ** Delete recoveryCategory\nexport const deactivateRecoveryCategory = id => {\n  return async (dispatch, getState) => {\n    try {\n      const response = await axios.post(`/api/recoveryCategories/${id}/deactivate`)\n      if (response.data.success === true) {\n        const successfulOptions = {\n          title: `${response.data.message}`,\n          position: 'tr',\n          autoDismiss: 1\n        }\n        dispatch(success(successfulOptions))\n        dispatch({\n          type: DEACTIVATE\n        })\n      }\n    } catch (error) {\n      const title = `We were not able to delete the recoveryCategory. Please try again.`\n      handleError(error, dispatch, title)\n    } finally {\n      dispatch({ type: SET_SUBMITTING, payload: false })\n      dispatch({ type: SET_LOADING, payload: false })\n    }\n  }\n}\n\n// ** Delete recoveryCategory\nexport const deleteRecoveryCategory = id => {\n  return async (dispatch, getState) => {\n    try {\n      const response = await axios.delete(`/api/recoveryCategories/${id}`)\n      if (response.data.success === true) {\n        const successfulOptions = {\n          title: `${response.data.message}`,\n          position: 'tr',\n          autoDismiss: 1\n        }\n        dispatch(success(successfulOptions))\n        dispatch({\n          type: DELETE\n        })\n      }\n    } catch (error) {\n      const title = `We were not able to delete the recoveryCategory. Please try again.`\n      handleError(error, dispatch, title)\n    } finally {\n      dispatch({ type: SET_SUBMITTING, payload: false })\n      dispatch({ type: SET_LOADING, payload: false })\n    }\n  }\n}\n","/**\n *\n * Input\n *\n */\n\nimport React, { useState, useEffect } from 'react'\nimport Select from 'react-select'\nimport { selectThemeColors } from '@utils/Utils'\nimport { useForm } from 'react-hook-form'\nimport { FormGroup, FormText, Input, Label } from 'reactstrap'\n\nconst ReactSelectGroup = props => {\n  const {\n    error,\n    disabled,\n    placeholder,\n    label,\n    name,\n    defaultValue = '',\n    onInputChange,\n    required = false,\n    autoComplete = 'off',\n    options = [],\n    ...rest\n  } = props\n\n  const [value, setValue] = useState('')\n  const [initValue, setInitValue] = useState(false)\n  const { register } = useForm()\n\n  const _onChange = (value, { action, removedValue }) => {\n    onInputChange(name, value)\n    setInitValue(true)\n    setValue(value)\n  }\n\n  return (\n    <FormGroup>\n      {label && <Label className='form-label'>\n        {label} {required && <span className='text-danger'>*</span>}\n      </Label>}\n      <Select\n        theme={selectThemeColors}\n        className='react-select'\n        classNamePrefix='select'\n        defaultValue={defaultValue}\n        options={options}\n        isDisabled={disabled}\n        name={name}\n        isClearable={false}\n        onChange={_onChange}\n        {...rest}\n      />\n      <FormText color=\"danger\">{error && error[0]}</FormText>\n    </FormGroup>\n  )\n}\n\nexport default ReactSelectGroup\n","// ** React Imports\nimport React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport classnames from \"classnames\"\n\n// ** Custom Components\nimport InputGroup from '@components/input-group'\nimport ReactSelectGroup from '@components/react-select-group'\n\n// ** Third Party Components\nimport { Button, Col, Form, Row } from 'reactstrap'\n\n// ** Store Actions\nimport { getAllUsers } from '@store/Users/actions'\nimport { getAllUserCars } from '@store/UserCars/actions'\nimport { getAllAgents, getAllEmployees } from '@store/Employees/actions'\nimport { getAllVendors, getAllVendorEmployees } from '@store/Vendors/actions'\nimport { getAllRecoveryCategories } from '@store/RecoveryCategory/actions'\nimport { recoveryEditChange, updateRecovery } from '@store/RecoveryRequest/actions'\nimport UILoader from \"../../../@core/components/ui-loader\"\n\nconst RecoveryEdit = ({\n  selectedRecovery\n}) => {\n  // ** States\n  const [recoveryData, setRecoveryData] = useState(null)\n\n  const dispatch = useDispatch(),\n    { allData: allUsers } = useSelector(state => state.users),\n    { allData: allUserCars } = useSelector(state => state.userCars),\n    { allData: allEmployees, agents } = useSelector(state => state.employees),\n    { allData: allVendors, employeeAllData: allVendorEmployees } = useSelector(state => state.vendors),\n    { allData: allRecoveryCategories } = useSelector(state => state.recoveryCategories),\n    { isLoading, isSubmitting, formErrors } = useSelector(state => state.recoveries)\n\n  // ** Update recoveryCategory image on mount or change\n  useEffect(() => {\n    if (selectedRecovery !== null) {\n      setRecoveryData(selectedRecovery)\n    }\n  }, [selectedRecovery])\n\n  useEffect(() => {\n    dispatch(getAllUsers())\n    dispatch(getAllEmployees())\n    dispatch(getAllAgents())\n    dispatch(getAllVendors())\n    dispatch(getAllRecoveryCategories())\n  }, [dispatch])\n\n  // ** Get user cars on changing user\n  useEffect(() => {\n    if (selectedRecovery.userId) {\n      dispatch(getAllUserCars({ userId: selectedRecovery.userId }))\n    }\n  }, [selectedRecovery.userId])\n\n  // ** Get vendor employee on changing vendor\n  useEffect(() => {\n    if (selectedRecovery.vendorId) {\n      dispatch(getAllVendorEmployees(selectedRecovery.vendorId))\n    }\n  }, [selectedRecovery.vendorId])\n\n  // ** Function to handle form submit\n  const handleSubmit = event => {\n    event.preventDefault()\n    dispatch(updateRecovery(selectedRecovery._id))\n  }\n\n  const handleFormChange = (name, value, type = 'text') => {\n    dispatch(recoveryEditChange(name, value, type))\n  }\n\n  const userOptions = allUsers.map((userItem) => {\n    return { value: userItem._id, label: `${userItem.firstName} ${userItem.lastName}` }\n  })\n  const { userInfo } = selectedRecovery\n  let userOption = null\n  if (selectedRecovery.userId && userInfo.length > 0) {\n    userOption = { value: selectedRecovery.userId, label: `${userInfo[0].firstName} ${userInfo[0].lastName}` }\n  }\n\n  const userCarOptions = allUserCars.map((userCarItem) => {\n    return { value: userCarItem._id, label: `${userCarItem.carMake} ${userCarItem.carModel} ${userCarItem.engineCapacity}` }\n  })\n  const { userCarInfo } = selectedRecovery\n  let userCarOption = null\n  if (selectedRecovery.userCarId && userCarInfo.length > 0) {\n    userCarOption = { value: selectedRecovery.userCarId, label: `${userCarInfo[0].carMake} ${userCarInfo[0].carModel} ${userCarInfo[0].engineCapacity}` }\n  }\n\n  const employeeOptions = allEmployees.map((employeeItem) => {\n    return { value: employeeItem._id, label: `${employeeItem.firstName} ${employeeItem.lastName}` }\n  })\n  const { employeeInfo } = selectedRecovery\n  let employeeOption = null\n  if (selectedRecovery.carhootEmployeeId && employeeInfo.length > 0) {\n    employeeOption = { value: selectedRecovery.carhootEmployeeId, label: `${employeeInfo[0].firstName} ${employeeInfo[0].lastName}` }\n  }\n  const vendorOptions = allVendors.map((vendorItem) => {\n    return { value: vendorItem._id, label: `${vendorItem.vendorName}` }\n  })\n\n  const { vendorInfo } = selectedRecovery\n  let vendorOption = null\n  if (selectedRecovery.vendorId && vendorInfo.length > 0) {\n    vendorOption = { value: selectedRecovery.vendorId, label: `${vendorInfo[0].vendorName}` }\n  }\n\n  const vendorEmployeeOptions = allVendorEmployees.map((vendorEmployeeItem) => {\n    return { value: vendorEmployeeItem._id, label: `${vendorEmployeeItem.firstName} ${vendorEmployeeItem.lastName}` }\n  })\n\n  const { vendorEmployeeInfo } = selectedRecovery\n  let vendorEmployeeOption = null\n  if (selectedRecovery.vendorId && vendorEmployeeInfo.length > 0) {\n    vendorEmployeeOption = { value: selectedRecovery.vendorId, label: `${vendorEmployeeInfo[0].firstName} ${vendorEmployeeInfo[0].lastName}` }\n  }\n\n  const fieldAgentOptions = agents.map((agent) => {\n    return { value: agent._id, label: `${agent.firstName} ${agent.lastName}` }\n  })\n\n  const { fieldAgentInfo } = selectedRecovery\n  let fieldAgentOption = null\n  if (selectedRecovery.fieldAgentId && fieldAgentInfo.length > 0) {\n    fieldAgentOption = { value: selectedRecovery.fieldAgentId, label: `${fieldAgentInfo[0].firstName} ${fieldAgentInfo[0].lastName}` }\n  }\n\n  const categoryOptions = allRecoveryCategories.map((category) => {\n    return { value: category._id, label: `${category.serviceName}` }\n  })\n\n  const { categoryInfo } = selectedRecovery\n  let categoryOption = null\n  if (selectedRecovery.orderCategoryId && categoryInfo.length > 0) {\n    categoryOption = { value: selectedRecovery.orderCategoryId, label: `${categoryInfo[0].serviceName}` }\n  }\n\n  return (\n    <Row>\n      <Col sm='12'>\n        <Form onSubmit={handleSubmit}>\n          <Row>\n            <Col md='4' sm='12'>\n              <ReactSelectGroup\n                label={'User'}\n                error={formErrors['userId']}\n                name={'userId'}\n                onInputChange={(name, value) => {\n                  handleFormChange(name, value, 'option')\n                }}\n                defaultValue={userOption}\n                options={userOptions}\n                required={true}\n                className={classnames({ 'is-invalid': formErrors['userId'] })}\n              />\n            </Col>\n            <Col md='4' sm='12'>\n              <ReactSelectGroup\n                label={'User Car'}\n                error={formErrors['userCarId']}\n                name={'userCarId'}\n                onInputChange={(name, value) => {\n                  handleFormChange(name, value, 'option')\n                }}\n                defaultValue={userCarOption}\n                options={userCarOptions}\n                required={true}\n                className={classnames({ 'is-invalid': formErrors['userCarId'] })}\n              />\n            </Col>\n            <Col md='4' sm='12'>\n              <ReactSelectGroup\n                label={'Carhoot Employee'}\n                error={formErrors['carhootEmployeeId']}\n                name={'carhootEmployeeId'}\n                onInputChange={(name, value) => {\n                  handleFormChange(name, value, 'option')\n                }}\n                defaultValue={employeeOption}\n                options={employeeOptions}\n                required={true}\n                className={classnames({ 'is-invalid': formErrors['carhootEmployeeId'] })}\n              />\n            </Col>\n            <Col md='4' sm='12'>\n              <ReactSelectGroup\n                label={'Field Agent'}\n                error={formErrors['fieldAgentId']}\n                name={'fieldAgentId'}\n                onInputChange={(name, value) => {\n                  handleFormChange(name, value, 'option')\n                }}\n                defaultValue={fieldAgentOption}\n                options={fieldAgentOptions}\n                required={true}\n                className={classnames({ 'is-invalid': formErrors['fieldAgentId'] })}\n              />\n            </Col>\n            <Col md='4' sm='12'>\n              <ReactSelectGroup\n                label={'Vendor'}\n                error={formErrors['vendorId']}\n                name={'vendorId'}\n                onInputChange={(name, value) => {\n                  handleFormChange(name, value, 'option')\n                }}\n                defaultValue={vendorOption}\n                options={vendorOptions}\n                required={true}\n                className={classnames({ 'is-invalid': formErrors['vendorId'] })}\n              />\n            </Col>\n            <Col md='4' sm='12'>\n              <ReactSelectGroup\n                label={'Vendor Employee'}\n                error={formErrors['vendorEmployeeId']}\n                name={'vendorEmployeeId'}\n                onInputChange={(name, value) => {\n                  handleFormChange(name, value, 'option')\n                }}\n                defaultValue={vendorEmployeeOption}\n                options={vendorEmployeeOptions}\n                required={true}\n                className={classnames({ 'is-invalid': formErrors['vendorEmployeeId'] })}\n              />\n            </Col>\n            <Col md='4' sm='12'>\n              <ReactSelectGroup\n                label={'Category'}\n                error={formErrors['orderCategoryId']}\n                name={'orderCategoryId'}\n                onInputChange={(name, value) => {\n                  handleFormChange(name, value, 'option')\n                }}\n                defaultValue={categoryOption}\n                options={categoryOptions}\n                required={true}\n                className={classnames({ 'is-invalid': formErrors['orderCategoryId'] })}\n              />\n            </Col>\n            <Col md='4' sm='12'>\n              <InputGroup\n                type={'number'}\n                label={'Order Price'}\n                error={formErrors['orderPrice']}\n                name={'orderPrice'}\n                placeholder={'Order Price'}\n                onInputChange={(name, value) => {\n                  handleFormChange(name, value)\n                }}\n                defaultValue={selectedRecovery.orderPrice}\n                required={true}\n                className={classnames({ 'is-invalid': formErrors['orderPrice'] })}\n              />\n            </Col>\n            <Col className='d-flex flex-sm-row flex-column mt-2' sm='12'>\n              <UILoader blocking={isLoading} className='mr-sm-1'>\n                <Button.Ripple className='mb-1 mb-sm-0 mr-0' type='submit' color='primary'>\n                  Save Changes\n                </Button.Ripple>\n              </UILoader>\n              <Button.Ripple color='secondary' outline>\n                Reset\n              </Button.Ripple>\n            </Col>\n          </Row>\n        </Form>\n      </Col>\n    </Row>\n  )\n}\n\nexport default RecoveryEdit\n","// ** React Imports\nimport { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Link, useParams } from 'react-router-dom'\nimport { Info, Share2, User } from \"react-feather\"\n\n// ** Recovery Edit Components\nimport AccountTab from './EditForm'\nimport InfoTab from \"./Information\"\nimport SocialTab from \"./Social\"\n\n// ** Store & Actions\nimport { getRecovery } from '@store/RecoveryRequest/actions'\n\n// ** Third Party Components\nimport { Alert, Card, CardBody, Col, Nav, NavItem, NavLink, Row, TabContent, TabPane } from 'reactstrap'\n\n// ** Custom Components\nimport UILoader from '@components/ui-loader'\n\n// ** Styles\nimport '@styles/react/apps/app-users.scss'\n\n\nconst RecoveryEdit = () => {\n  // ** States & Vars\n  const [activeTab, setActiveTab] = useState('1'),\n    dispatch = useDispatch(),\n    { isLoading, selectedRecovery } = useSelector(state => state.recoveries),\n    { id } = useParams()\n\n  // ** Function to toggle tabs\n  const toggle = tab => setActiveTab(tab)\n\n  // ** Function to get recoveryCategory on mount\n  useEffect(() => {\n    dispatch(getRecovery(id))\n  }, [dispatch])\n\n  return selectedRecovery !== null && selectedRecovery !== undefined ? (\n    <UILoader blocking={isLoading}>\n      <Row className='app-user-edit'>\n        <Col sm='12'>\n          <Card>\n            <CardBody className='pt-2'>\n              <Nav pills>\n                <NavItem>\n                  <NavLink active={activeTab === '1'} onClick={() => toggle('1')}>\n                    <User size={14} />\n                    <span className='align-middle d-none d-sm-block'>Account</span>\n                  </NavLink>\n                </NavItem>\n              </Nav>\n              <TabContent activeTab={activeTab}>\n                <TabPane tabId='1'>\n                  <AccountTab selectedRecovery={selectedRecovery} />\n                </TabPane>\n              </TabContent>\n\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n    </UILoader>\n  ) : (\n    <Alert color='danger'>\n      <h4 className='alert-heading'>Recovery not found</h4>\n      <div className='alert-body'>\n        Recovery with id: {id} doesn't exist. Check list of all RecoveryCategories: <Link to='/recoveryRequest/list'>RecoveryCategories List</Link>\n      </div>\n    </Alert>\n  )\n}\n\nexport default RecoveryEdit\n"],"sourceRoot":""}